@page "/sharedfiles"
@using System.Net.WebSockets
@using Newtonsoft.Json
@using System.Text
@attribute [Authorize]
@inject IJSRuntime JsRuntime
@inject WebSocketService WebSocketService
@inject AuthenticationStateProvider authenticationStateProvider
<h3>SharedFiles</h3>

<table class="table">
    <thead>
        <tr>
            <th>File Name</th>
            <th>Extension</th>
            <th>Size(Kbyte)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @if (IsLoading == false && _files.Count == 0)
        {
            <tr class="text-center">
                <td colspan="4">
                    <div class="d-flex justify-content-center">
                        <div class="">
                            <span class="">Not Found !</span>
                        </div>
                    </div>
                </td>
            </tr>
        }
        else if (IsLoading == true && _files is null)
        {
            <tr class="text-center">
                <td colspan="4">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only"></span>
                        </div>
                    </div>
                </td>
            </tr>
        }
        else if (_files.Count != 0 && IsLoading == false)
        {
            @foreach (var file in _files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Extension</td>
                    <td>@Math.Round(file.Size / 1024, 2)</td>
                    <td>
                        <div class="d-flex d-inline-block">
                   
                            <button class="btn btn-success m-1" @onclick="async() => await DownloadAsync(file.Id)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z" />
                                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                                </svg>&nbsp;Download
                            </button>
                            
                        </div>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@code {
    private List<FileDto> _files = new List<FileDto>();
    public bool IsLoading { get; set; } = false;
    private UserSession userSession = new UserSession();

    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;
        await base.OnInitializedAsync();

        if (WebSocketService.ClientWebSocket.State != WebSocketState.Open)
        {
            await WebSocketService.ConnectAsync("ws://localhost:5125/ws");
        }

        var authentication = (CustomAuthenticationStateProvider)authenticationStateProvider;
        userSession = await authentication.GetUserSessionAsync();
        var request = JsonConvert.SerializeObject(new JsonRequest()
            {
                ConnectionId = String.Empty,
                RequestType = RequestType.Request,
                MethodType = MethodType.GetFileAccessByUserId,
                UserId = userSession.UserId,
                Token = userSession.Token
            });
        ConnectionManagerService.UserId = userSession.UserId;
        await Files.SendMessageAsync(WebSocketService.ClientWebSocket, request, WebSocketMessageType.Binary);

        var receiveTask = Task.Run(async () =>
        {
            var buffer = new byte[50000 * 1024];

            while (true)
            {
                var result = await WebSocketService.ClientWebSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);

                if (result.MessageType == WebSocketMessageType.Binary)
                {
                    var messageReceived = Encoding.UTF32.GetString(buffer, 0, result.Count);
                    var jsonResponse = JsonConvert.DeserializeObject<JsonRequest>(messageReceived);

                    if (jsonResponse is { RequestType: RequestType.Response })
                    {
                        FileRequest? fileRequest = null;
                        JsonRequest? response = null;


                        switch (jsonResponse.MethodType)
                        {
                            case MethodType.Post:
                                fileRequest = JsonConvert.DeserializeObject<FileRequest>(jsonResponse.Body);

                                break;
                            case MethodType.Put:
                                fileRequest = JsonConvert.DeserializeObject<FileRequest>(jsonResponse.Body);

                                break;
                            case MethodType.Delete:
                                fileRequest = JsonConvert.DeserializeObject<FileRequest>(jsonResponse.Body);

                                //response = ;
                                break;
                            case MethodType.GetFileAccessByUserId:
                                var files = JsonConvert.DeserializeObject<List<FileDto>>(jsonResponse.Body);
                                IsLoading = false;
                                _files = files;
                                StateHasChanged();
                                break;
                            case MethodType.GetOne:
                                fileRequest = JsonConvert.DeserializeObject<FileRequest>(jsonResponse.Body);
                                await DownloadFileFromStreamAsync(fileRequest);
                                break;

                        }
                    }
                }

                if (result.MessageType == WebSocketMessageType.Text)
                {
                    var messageReceived = Encoding.UTF32.GetString(buffer, 0, result.Count);
                    ConnectionManagerService.ConnectionId = messageReceived;

                }

                if (result.MessageType == WebSocketMessageType.Close)
                {
                    break;
                }
            }
        });

    }

    private async Task DownloadFileFromStreamAsync(FileRequest fileRequest)
    {
        var fileStream = new MemoryStream(fileRequest.Content);

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileRequest.Name, streamRef);
    }

    public async Task DownloadAsync(int id)
    {
        await Files.SendMessageAsync(WebSocketService.ClientWebSocket,
        JsonConvert.SerializeObject(
                new JsonRequest()
                    {
                        Token = userSession.Token,
                        UserId = ConnectionManagerService.UserId,
                        MethodType = MethodType.GetOne,
                        RequestType = RequestType.Request,
                        ConnectionId = ConnectionManagerService.ConnectionId,
                        Body = JsonConvert.SerializeObject(new FileRequest() { Id = id })
                    }),
        WebSocketMessageType.Binary);
    }
}
